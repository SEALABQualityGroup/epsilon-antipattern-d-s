operation Operation FresDemandGreaterOrEqualThan( th_maxOpResDemand : List(Real) ) : Boolean{
	
	var turnback : Boolean = true;
	
	var appliedStereotypes = self.getAppliedStereotypes();
	
	var gaStep = self.getStereotype('GaStep');
	var servCount = self.getValue(gaStep, 'servCount');
	
	var i : Integer = 0;

	for(demand in servCount){
		if(demand.asReal() < th_maxOpResDemand.at(i) ){ //al primo demand non > della soglia relativa ritorna false
			turnback = false;
			break;
		}
		i = i+1;
	}
	
	return turnback;	
}

operation Operation FresDemandLesserThan( th_minOpResDemand : List(Real) ) : Boolean{

	var turnback : Boolean = true;
	
	var appliedStereotypes = self.getAppliedStereotypes();
	
	var gaStep = self.getStereotype('GaStep');
	var servCount = self.getValue(gaStep, 'servCount');
	
	var i : Integer = 0;

	for(demand in servCount){
		if(demand.asReal() >= th_minOpResDemand.at(i) ){ //al primo demand non > della soglia relativa ritorna false
			turnback = false;
			break;
		}
		i = i+1;
	}
	return turnback;	
}


//clone una interface realization
operation InterfaceRealization cloneInterfaceRealization() : InterfaceRealization {
	var newRealization : InterfaceRealization = new InterfaceRealization;
	newRealization.name = self.name;
	newRealization.client = self.client;
	newRealization.supplier = self.supplier;
	newRealization.contract = self.contract;
	
	return newRealization;
}

//clone una operation
operation Operation cloneOperationInto(component : Component) : Operation{
	var newOperation = new Operation;
	newOperation.name = self.name + "_Cloned";
	
	component.ownedOperation.add(newOperation);
	
	newOperation.cloneOwnedParameterFrom(self);
	
	newOperation.cloneAppliedStereotypesFrom(self);
	
	newOperation.cloneReturnTypeFrom(self);
	
	return newOperation;
}

//clone owned parameter
operation Operation cloneOwnedParameterFrom(op : Operation){
	self.ownedParameter = op.ownedParameter.clone();
}

//clone i parametri di un operazione
operation Operation cloneReturnTypeFrom(op : Operation){
	if(op.getType().isDefined())
		self.setType(op.getType());
}

//recupero la lista dei process node che hanno un legame con l'operazione
operation Operation getProcessNodes() : List(Node){
	var returnValue : List(Node) = new List(Node);
	
	for(node in Node.allInstances){
		for(deployment in node.deployment){
			var listOfArtifacts = deployment.deployedArtifact;
			for(art in listOfArtifacts){
					if( art.hasRepresentationOf(self.class) ){
						returnValue.add(node);
					}
				}
			}
	}
	return returnValue;
}

//recupero gli UseCase relativi all'operazione
operation Operation getUseCases() : List(UseCase){
	var returnValue : List(UseCase) = new List(UseCase);
	
	for(interaction in Interaction.allInstances){
		if( interaction.hasOperation(self) ){
			returnValue.add(interaction.namespace);
		}
	}
	return returnValue;
}

//splitta il componente
operation Operation splitComponent(reduction : Real) : Component{
	
	var selfComponent = self.class; //recupero il componente che possiede l'operazione critica
	var selfPackage = self.getNearestPackage(); //recupero il package contenitore dell'operazione critica
	
	var splittedComponent : Component = new Component; //creo il componente splittato
	splittedComponent.name = self.class.name + " Splitted";
	selfPackage.addElement(splittedComponent); //aggiungo il componente splittato al package del componente sorgente
	splittedComponent.cloneAppliedStereotypesFrom(selfComponent); //clono gli stessi stereotipi del componente sorgente
	
	splittedComponent.moveInterfacesRealizationFrom(selfComponent, self);
	--splittedComponent.moveInterfacesUsedFrom(selfComponent, self);
	
	var listOfUsedProvidedInterfaces : List(Interface) = selfComponent.getAllUsedIntefacesRequiredsBy(self); //TODO vedere il nuovo modello
	
	splittedComponent.reductionServDemand(reduction);
	
	return splittedComponent;
}

//recupero tutti i message dell'operazione
operation Operation getAllOwnMessages() : List(Message){
	var returnValue : List(Message) = new List(Message);
	
	for(message in Message.allInstances){
		if(message.signature == self){
			returnValue.add(message);
		}
	}
	return returnValue;
}

//recupero tutti gli interaction che contengono l'op critica
operation Operation getAllInteractions() : List(Interaction){
	var returnValue : List(Interaction) = new List(Interaction);
	for(interaction in Interaction.allInstances){
		for(message in self.getAllOwnMessages()){
			if(message.namespace == interaction){
				returnValue.add(interaction);
				break;
			}
		}
	}
	return returnValue;
}

operation Operation getMessageIn(interaction : Interaction) : Message{
	var mes = interaction.getMessages()->selectOne(iterator : Message | iterator.getSignature() == self);
	return mes;
}