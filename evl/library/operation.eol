operation Operation F_resDemandGreaterOrEqualThan( th_maxResDemand : List(Real) ) : Boolean{
	
	var turnback : Boolean = true;
	
	var appliedStereotypes = self.getAppliedStereotypes();
	
	var gaStep = self.getStereotype('GaStep');
	var servCount = self.getValue(gaStep, 'servCount');
	
	var i : Integer = 0;
	
	for(demand in servCount){
		if(demand.asReal() < th_maxResDemand.at(i).asReal() ){ //al primo demand non > della soglia relativa ritorna false
			turnback = false;
			break;
		}
		i = i+1;
	}
	
	return turnback;	
}

operation Operation F_resDemandLesserThan( th_minResDemand : List(Real) ) : Boolean{

	var turnback : Boolean = true;
	
	var appliedStereotypes = self.getAppliedStereotypes();
	
	var gaStep = self.getStereotype('GaStep');
	var servCount = self.getValue(gaStep, 'servCount');
	
	var i : Integer = 0;

	for(demand in servCount){
		if(demand.asReal() >= th_minResDemand.at(i) ){ //al primo demand non > della soglia relativa ritorna false
			turnback = false;
			break;
		}
		i = i+1;
	}
	return turnback;	
}


//clone una operation
operation Operation cloneOperationInto(component : Component) : Operation{
	var newOperation = new Operation;
	newOperation.name = self.name + "_Cloned";
	
	component.ownedOperation.add(newOperation);
	
	newOperation.cloneOwnedParameterFrom(self);
	
	newOperation.cloneAppliedStereotypesFrom(self);
	
	newOperation.cloneReturnTypeFrom(self);
	
	return newOperation;
}

//clone owned parameter
operation Operation cloneOwnedParameterFrom(op : Operation){
	self.ownedParameter = op.ownedParameter.clone();
}

//clone i parametri di un operazione
operation Operation cloneReturnTypeFrom(op : Operation){
	if(op.getType().isDefined())
		self.setType(op.getType());
}

//recupero la lista dei process node che hanno un legame con l'operazione
operation Operation getProcessNodes() : List(Node){
	var returnValue : List(Node) = new List(Node);
	
	for(node in Node.allInstances){
		if(node.hasStereotype("GaExecHost")){
			for(deployment in node.getDeployments()){
				var listOfArtifacts = deployment.getDeployedArtifacts();
				for(art in listOfArtifacts){
					if( art.hasRepresentationOf(self.getOwner()) ){
						returnValue.add(node);
					}
				}
			}
		}
	}
	return returnValue;
}

//recupero la lista dei process node che hanno un legame con l'operazione
operation Operation getProcessNodes(stereotype : String) : List(Node){
	var returnValue : List(Node) = new List(Node);
	
	for(node in Node.allInstances){
		if(node.hasStereotype(stereotype)){
			for(deployment in node.getDeployments()){
				var listOfArtifacts = deployment.getDeployedArtifacts();
				for(art in listOfArtifacts){
					if( art.hasRepresentationOf(self.getOwner()) ){
						returnValue.add(node);
					}
				}
			}
		}
	}
	return returnValue;
}

//recupero gli UseCase relativi all'operazione
operation Operation getUseCases() : List(UseCase){
	var returnValue : List(UseCase) = new List(UseCase);
	for(interaction in Interaction.allInstances){
		if( interaction.hasOperation(self) ){
			returnValue.add(interaction.getOwner());
		}
	}
	return returnValue;
}

//splitta il componente
operation Operation splitComponent() : Component{
	
	var selfComponent = self.class; //recupero il componente che possiede l'operazione critica
	var selfPackage = self.getNearestPackage(); //recupero il package contenitore dell'operazione critica
	
	var splittedComponent : Component = new Component; //creo il componente splittato
	selfPackage.addElement(splittedComponent); //aggiungo il componente splittato al package del componente sorgente

	splittedComponent.name = self.class.name + " Splitted";
	splittedComponent.cloneAppliedStereotypesFrom(selfComponent); //clono gli stessi stereotipi del componente sorgente
	
	splittedComponent.moveInterfacesRealizationFrom(selfComponent, self);
	
	var listOfUsedProvidedInterfaces : List(Interface) = selfComponent.getAllUsedIntefacesRequiredsBy(self); //TODO vedere il nuovo modello

	return splittedComponent;
}

operation Operation splitClass() : Class{
	
	var selfComponent = self.getOwner(); //recupero il componente che possiede l'operazione critica
	var selfPackage = self.getNearestPackage(); //recupero il package contenitore dell'operazione critica
	
	var splittedClass : Class = new Class(); //creo il componente splittato
	selfPackage.addElement(splittedClass); //aggiungo il componente splittato al package del componente sorgente

	splittedClass.name = self.getOwner().name + " Refactored";
	splittedClass.cloneAppliedStereotypesFrom(self.getOwner()); //clono gli stessi stereotipi del componente sorgente
	
	splittedClass.moveInterfacesRealizationFrom(self.getOwner(), self);
	
	var listOfUsedProvidedInterfaces : List(Interface) = splittedClass.getAllUsedIntefacesRequiredsBy(self); //TODO vedere il nuovo modello

	return splittedClass;
}

//recupero tutti i message dell'operazione
operation Operation getAllOwnMessages() : List(Message){
	var returnValue : List(Message) = new List(Message);
	for(message in Message.allInstances){
		if(message.getSignature() == self){
			returnValue.add(message);
		}
	}
	return returnValue;
}

//recupero tutti gli interaction che contengono l'op critica
operation Operation getAllInteractions() : List(Interaction){
	var returnValue : List(Interaction) = new List(Interaction);
	for(interaction in Interaction.allInstances){
		for(message in self.getAllOwnMessages()){
			if(message.namespace == interaction){
				returnValue.add(interaction);
				break;
			}
		}
	}
	return returnValue;
}

operation Operation getMessageIn(interaction : Interaction) : Message{
	var mes = interaction.getMessages()->selectOne(iterator : Message | iterator.getSignature() == self);
	return mes;
}

operation Operation getMessagesIn(interaction : Interaction) : Sequence(Message){
	var mes = interaction.getMessages()->select(iterator : Message | iterator.getSignature() == self);
	return mes.asSequence();
}

operation Operation getUsages() : List(Usage){
	return Usage.allInstances->select(usage : Usage |
				usage.getSuppliers()->exists(supplier : Operation | supplier == self) or
					usage.getClients()->exists(client : Operation | client == self)
			);
}

operation Operation getUsedInterfaces() : Sequence(Interface){
	var usages = self.getUsages();	
	var returnValue : Sequence(Interface) = new Sequence(Interface);
	for(usage in usages){
		if(usage.getClients()->exists(cli | cli.getOwner().isTypeOf(Interface))){
			returnValue.add(usage.getClients()->selectOne(cli | cli.getOwner().isTypeOf(Interface)).getOwner());
		}
	}	
	return returnValue;
}


/***********************

	IT MUST BE CHECKED	

************************/
//FIXME Check the behavior
operation Operation moveIntoComponent(component : Component){
	var usages = self.getUsages()->select(usage : Usage | 
		(usage.getSuppliers().size() == 1 and usage.getSuppliers()->first() == self) or 
			(usage.getClients().size() == 1 and usage.getClients()->first() == self));
			
	component.addUsages(usages);
	component.moveOperation(self);
}

operation Operation moveIntoClass(class : Class){
	var usages = self.getUsages()->select(usage : Usage | 
		(usage.getSuppliers().size() == 1 and usage.getSuppliers()->first() == self) or 
			(usage.getClients().size() == 1 and usage.getClients()->first() == self));
			
	class.addUsages(usages);
	class.moveOperation(self);
}


operation Operation redeployOnNearLessUsedNode() : Boolean{

	var listOfCriticSourceNode = self.getDeployedNodesHwUtilization(th_maxHwUtil); 
	var listOfNearLessUsed : List(Node) = new List(Node);
	
	for(node in listOfCriticSourceNode){
		var listOfNeighbours = node.getDirectlyLinkedNode(); //lista dei nodi vicini
		if(listOfNeighbours.isUndefined() or listOfNeighbours.size() == 0){
			//non esistono vicini al nodo
			return false;
		}
		
		var lessNode : Node = listOfNeighbours->selectOne(
			node : Node | node.hasStereotype("GaExecHost") and
				node.getValue(node.getStereotype("GaExecHost"), "utilization").isDefined()
		);
		
		if(lessNode.isUndefined()) return false;
		var utilization : Real = lessNode.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first().asReal();
		
		for(neighbour in listOfNeighbours){
			if(neighbour.hasStereotype("GaExecHost")){
				var nearNodeUtilization = neighbour.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first();
				if(nearNodeUtilization.isDefined() and nearNodeUtilization.asReal() < utilization){
					lessNode = nearNode;	
					utilization = nearNodeUtilization;
				}
			}
		}
		listOfNearLessUsed.add(lessNode);
		if(listOfNearLessUsed.isUndefined() or listOfNearLessUsed.size() == 0) return false;
		self.getOwner().redeployOn(listOfNearLessUsed->first(), node);
	}
	//deploy il componente splittato sul primo nodo della lista dei vicini meno utilizzati
	
	return true;
}
//TODO controllare con gli altri AP, modificato il comportamento del fixing

operation Operation dynamicFixing(component : Component) {
	var interaction = self.getAllInteractions()->first(); //TODO controllare potrebbe lavorare su un interaction non corretto
	var sourceLifeline = component.getLifeline(interaction);
	var lifeline = interaction.createLifeline(self.class.name+"Lifeline"); //L2
	var spProp = interaction.createOwnedAttribute(self.class.name, self.class);
	
	lifeline.setRepresents(spProp);
	lifeline.cloneAppliedStereotypesFrom(sourceLifeline);
	lifeline.setVisibility(sourceLifeline.getVisibility());
	
	var beses = sourceLifeline.getBESes();
	var bes = beses->selectOne(bes | bes.getStart().getMessage().getSignature() == self );
	
	var sourceCoveredBys :Sequence(InteractionFragment) = new Sequence(InteractionFragment);
	//sposto dal MOS_receive dell'op fino all'EOS esclusi
	for(i in sourceLifeline.getCoveredBys()){
		if( i.getOwner().getIndexOf(i) > bes.getOwner().getIndexOf(bes.getStart()) 
			and i.getOwner().getIndexOf(i) < bes.getOwner().getIndexOf(bes.getFinish())
		){
			lifeline.getCoveredBys().add(i);
			sourceCoveredBys.add(i);
		}
	}
	for(i in sourceCoveredBys){
		sourceLifeline.removeInteractionFragment(i);
	}
	
	//sposto il MOS_r dell'op e il EOS
	lifeline.getCoveredBys().add(bes.getStart());
	lifeline.getCoveredBys().add(bes.getFinish());
	
	sourceLifeline.removeInteractionFragment(bes.getStart());
	sourceLifeline.removeInteractionFragment(bes.getFinish());
}

operation Operation dynamicFixing(class : Class) {
	var interaction = self.getAllInteractions()->first(); //TODO controllare potrebbe lavorare su un interaction non corretto
	var sourceLifeline = class.getLifeline(interaction);
	var lifeline = interaction.createLifeline(self.class.name+"Lifeline"); //L2
	var spProp = interaction.createOwnedAttribute(self.class.name, self.class);
	
	lifeline.setRepresents(spProp);
	lifeline.cloneAppliedStereotypesFrom(sourceLifeline);
	lifeline.setVisibility(sourceLifeline.getVisibility());
	
	var beses = sourceLifeline.getBESes();
	var bes = beses->selectOne(bes | bes.getStart().getMessage().getSignature() == self );
	
	var sourceCoveredBys :Sequence(InteractionFragment) = new Sequence(InteractionFragment);
	//sposto dal MOS_receive dell'op fino all'EOS esclusi
	for(i in sourceLifeline.getCoveredBys()){
		if( i.getOwner().getIndexOf(i) > bes.getOwner().getIndexOf(bes.getStart()) 
			and i.getOwner().getIndexOf(i) < bes.getOwner().getIndexOf(bes.getFinish())
		){
			lifeline.getCoveredBys().add(i);
			sourceCoveredBys.add(i);
		}
	}
	for(i in sourceCoveredBys){
		sourceLifeline.removeInteractionFragment(i);
	}
	
	//sposto il MOS_r dell'op e il EOS
	lifeline.getCoveredBys().add(bes.getStart());
	lifeline.getCoveredBys().add(bes.getFinish());
	
	sourceLifeline.removeInteractionFragment(bes.getStart());
	sourceLifeline.removeInteractionFragment(bes.getFinish());
}


operation Operation calculateTotalUtilization() : Real{
	var totalUtilization : Real = 0.0;
	var i : Integer = 0;
	if(self.hasStereotype("GaStep") and self.hasStereotype("GaScenario") ){
		for(utl in self.getValue(self.getStereotype("GaStep"), "servCount")){
			totalUtilization = totalUtilization + utl.asReal();
			i = i + 1;
		}
	} 
	return (totalUtilization/i.asReal());
}

operation Operation moveIntoNewComponent(){
	var sourceComponent : Component = self.class;
	var packageContainer = sourceComponent.getNearestPackage();
	
	var newComponent : Component = new Component;
	newComponent.name = "New "+sourceComponent.name;
	packageContainer.addElement(newComponent);
	
	self.moveIntoComponent(newComponent);	
}


operation Operation getOwnerInteractionOperands() : List(InteractionOperand){
	var returnValue : List(InteractionOperand) = new List(InteractionOperand);
	for(mes in self.getAllOwnMessages()){
		if(mes.getSendEvent().getOwner().isTypeOf(InteractionOperand)){
			returnValue.add(mes.getSendEvent().getOwner());
		}
	}
	
	return returnValue;
}

operation Operation splitting(numberOfSplitting : Integer, percentage : Integer) : Boolean{
	var turnback : Boolean = false;
	
	var message = "fai la scelta: 0- splitto il componente con l'operazione critica; 1- splitto l'operazione critica";
	var caseValue = UserInput.promptInteger(message, 0);
	
	switch (caseValue) {
		case "1" : 
			turnback = self.splittingOperation(numberOfSplitting, percentage);
		case "2" : "2".println();
		case "3" : "3".println(); 
		default:
			turnback = self.splittingComponent(numberOfSplitting, percentage);
	}
	
	return turnback;
}

operation Operation splittingComponent( numberOfSplitting : Integer, percentage : Integer ) : Boolean {	
	//static
	var sourceComponent : Component = self.class;
	var splittedComponent = self.splitComponent(percentage.asReal());
	
	//dynamic
	var interaction = self.getAllInteractions()->first();
	var sourceLifeline = sourceComponent.getLifeline(interaction);
	var lifeline = interaction.createLifeline(splittedComponent.name+"lifeline"); //L2
	
	//deploy
	var listNodesOfSplittedComponent = splittedComponent.getNodes();

	var spProp = interaction.createOwnedAttribute(splittedComponent.name, splittedComponent);
	lifeline.setRepresents(spProp);
	
	splittedComponent.moveOperation(self); //sposta l'operazione sul componente appena creato
	
	var newMessage = interaction.createMessage(self.name+"_message");
	
	lifeline.cloneAppliedStereotypesFrom(sourceLifeline);
	lifeline.setVisibility(sourceLifeline.getVisibility());
		
	var sendMOS : MessageOccurrenceSpecification = new MessageOccurrenceSpecification;
	var receiveMOS : MessageOccurrenceSpecification = new MessageOccurrenceSpecification;
	
	interaction.getFragments().add(sendMOS);
	interaction.getFragments().add(receiveMOS);
	
	newMessage.setSendEvent(sendMOS);
	newMessage.setReceiveEvent(receiveMOS);
	
	var besL2 : BehaviorExecutionSpecification = new BehaviorExecutionSpecification;
	interaction.getFragments().add(besL2);
	
	var messageEnd : ExecutionOccurrenceSpecification = new ExecutionOccurrenceSpecification;
	interaction.getFragments().add(messageEnd);
	
	besL2.start = receiveMOS ;
	besL2.finish = messageEnd;
	
	lifeline.getCoveredBys().add(besL2);
	lifeline.getCoveredBys().add(receiveMOS);
	
	//return 
	return true;
}

/*********************************************************************************************
 *																							 *
 *	 									PAPER												 *
 *																							 *
 *********************************************************************************************/
operation Operation moveToNewComponentDeployedOnNewNode() : Boolean {	
	//static
	var sourceComponent : Component = self.getOwner();
	var splittedComponent = self.splitComponent();
	
	//deploy
	splittedComponent.deployOnNewNodes(sourceComponent);
	splittedComponent.moveOperation(self); //sposta l'operazione sul componente appena creato
	
	//dynamic
	self.dynamicFixing(sourceComponent);
	
	return true;
}

operation Operation moveToNewOwnerDeployedOnNewNode() : Boolean{

	if(self.getOwner().isTypeOf(Class)){
		self.moveToNewClassDeployedOnNewNode();
	}else if(self.getOwner().isTypeOf(Component)){
		self.moveToNewComponentDeployedOnNewNode();
	}

}

operation Operation moveToNewClassDeployedOnNewNode() : Boolean {	
	//static
	var sourceClass : Class = self.getOwner();
	var splittedClass = self.splitClass();
	
	//deploy
	splittedClass.deployOnNewNodes(sourceClass);
	splittedClass.moveOperation(self); //sposta l'operazione sul componente appena creato
	
	//dynamic
	self.dynamicFixing(sourceClass);
	
	return true;
}

operation Operation moveToNewOwnerDeployedOnNearLessUsedNode() : Boolean{
	if(self.getOwner().isTypeOf(Class)){
		return self.moveToNewClassDeployedOnNearLessUsedNode();
	}else if(self.getOwner().isTypeOf(Component)){
		return self.moveToNewComponentDeployedOnNearLessUsedNode();
	}
}

operation Operation moveToNewClassDeployedOnNearLessUsedNode() : Boolean {
	//static
	var sourceClass : Class = self.getOwner();
	var splittedClass : Class = self.splitClass();
	
	//deploy
	var listOfNearLessUsedNode = sourceClass.getNearLessUsedNodes();
	
	//lista dei nodi critici che manifestano il componente con l'op critica
	var listOfCriticSourceNode = self.getDeployedNodesHwUtilization(th_maxHwUtil); 
	var listOfNearLessUsed : List(Node) = new List(Node);
		
	splittedClass.moveOperation(self);
		
	for(node in listOfCriticSourceNode){
		var listOfNeighbours = node.getDirectlyLinkedNode(); //lista dei nodi vicini
		if(listOfNeighbours.isUndefined() or listOfNeighbours.size() == 0){
			//non esistono vicini al nodo
			return false;
			//break;
		}
		
		var lessNode : Node = listOfNeighbours->selectOne(
			node : Node | node.hasStereotype("GaExecHost") and
				node.getValue(node.getStereotype("GaExecHost"), "utilization").isDefined()
		);
		
		if(lessNode.isUndefined()) return false;
		var utilization : Real = lessNode.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first().asReal();
		
		for(neighbour in listOfNeighbours){
			if(neighbour.hasStereotype("GaExecHost")){
				var nearNodeUtilization = neighbour.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first();
				if(nearNodeUtilization.isDefined() and nearNodeUtilization.asReal() < utilization){
					lessNode = nearNode;	
					utilization = nearNodeUtilization;
				}
			}
		}
		listOfNearLessUsed.add(lessNode);
	}
	//deploy il componente splittato sul primo nodo della lista dei vicini meno utilizzati
	if(listOfNearLessUsed.isUndefined() or listOfNearLessUsed.size() == 0) return false;
	splittedClass.deployOn(listOfNearLessUsed->first());
	
	//dynamic
	self.dynamicFixing(sourceClass);
	
	return true;
}

operation Operation moveToNewComponentDeployedOnNearLessUsedNode() : Boolean {
	//static
	var sourceComponent : Component = self.class;
	var splittedComponent : Component = self.splitComponent();
	
	//deploy
	var listOfNearLessUsedNode = sourceComponent.getNearLessUsedNodes();
	
	//lista dei nodi critici che manifestano il componente con l'op critica
	var listOfCriticSourceNode = self.PaF_F_maxHwUtil(); 
	var listOfNearLessUsed : List(Node) = new List(Node);
		
	splittedComponent.moveOperation(self);
	//self.reductionServDemand(percentage);
		
	for(node in listOfCriticSourceNode){
		var listOfNeighbours = node.getDirectlyLinkedNode(); //lista dei nodi vicini
		if(listOfNeighbours.isUndefined() or listOfNeighbours.size() == 0){
			//non esistono vicini al nodo
			return false;
			//break;
		}
		
		var lessNode : Node = listOfNeighbours->selectOne(
			node : Node | node.hasStereotype("GaExecHost") and
				node.getValue(node.getStereotype("GaExecHost"), "utilization").isDefined()
		);
		
		if(lessNode.isUndefined()) return false;
		var utilization : Real = lessNode.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first().asReal();
		
		for(neighbour in listOfNeighbours){
			if(neighbour.hasStereotype("GaExecHost")){
				var nearNodeUtilization = neighbour.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first();
				if(nearNodeUtilization.isDefined() and nearNodeUtilization.asReal() < utilization){
					lessNode = nearNode;	
					utilization = nearNodeUtilization;
				}
			}
		}
		listOfNearLessUsed.add(lessNode);
	}
	//deploy il componente splittato sul primo nodo della lista dei vicini meno utilizzati
	if(listOfNearLessUsed.isUndefined() or listOfNearLessUsed.size() == 0) return false;
	splittedComponent.deployOn(listOfNearLessUsed->first());
	
	//dynamic
	self.dynamicFixing(sourceComponent);
	
	return true;
}


operation Operation redeployOnNearLessUsedNode() : Boolean {
	var sourceComponent = self.class;
	var listOfSourceNode = sourceComponent.getNodes();
	
	return self.redeployOnNearLessUsedNode();
}

operation Operation moveToLessCriticalOwner() : Boolean{
	if(self.getOwner().isTypeOf(Class)){
		return self.moveToLessCriticalClass();
	}else if(self.getOwner().isTypeOf(Component)){
		return self.moveToLessCriticalComponent();
	}
	return false;
}

operation Operation moveToLessCriticalComponent() : Boolean{
	var lessUsedComponent : Component = Component.allInstances->first();
	var sourceComponent : Component = self.class;
	
	for(component in Component.allInstances){
		if( component.calculateUtilization() < lessUsedComponent.calculateUtilization() ){
			lessUsedComponent = component;
		}
	}
	
	if(lessUsedComponent <> self.class){
		lessUsedComponent.println();
		self.moveIntoComponent(lessUsedComponent);
	}
	
	//dynamic
	var listOfLifeline = sourceComponent.getLifelines();
	var interaction = listOfLifeline->first().getInteraction();
	var sourceLifeline = interaction.getComponentLifeline(sourceComponent);
	
	var lifeline = lessUsedComponent.createLifelineInto(interaction);
	
	var message = self.getMessageIn(interaction);
	var indexOfMesMOS_R : Integer = interaction.getIndexOf(message.getReceiveEvent());
	
	var besL2 : BehaviorExecutionSpecification = new BehaviorExecutionSpecification;
	interaction.addFragmentAt(besL2,indexOfMesMOS_R+1);
	
	var sourceBES = sourceLifeline.getBESStartedBy(message.getReceiveEvent());
	besL2.start = self.getMessageIn(interaction).getReceiveEvent();
	besL2.finish = sourceBES.getFinish();
	
	lifeline.getCoveredBys().add(message.getReceiveEvent());
	lifeline.getCoveredBys().add(besL2);
	lifeline.getCoveredBys().add(sourceBES.getFinish());
	
	sourceLifeline.removeCovered(message.getReceiveEvent());
	//sourceLifeline.removeCovered(sourceBES);
	sourceLifeline.removeCovered(sourceBES.getFinish());
}

operation Operation moveToLessCriticalClass() : Boolean{
	var lessUsedClass : Class = Class.allInstances->first();
	var sourceClass : Class = self.getOwner();
	
	for(class in Class.allInstances){
		if( class.calculateUtilization() < lessUsedClass.calculateUtilization() ){
			lessUsedClass = class;
		}
	}
	
	if(lessUsedClass <> self.getOwner()){
		self.moveIntoClass(lessUsedClass);
	}
	
	//dynamic
	var listOfLifeline = sourceClass.getLifelines();
	var interaction = listOfLifeline->first().getInteraction();
	var sourceLifeline = interaction.getClassLifeline(sourceClass);
	
	var lifeline = lessUsedClass.createLifelineInto(interaction);
	
	var message = self.getMessageIn(interaction);
	var indexOfMesMOS_R : Integer = interaction.getIndexOf(message.getReceiveEvent());
	
	var besL2 : BehaviorExecutionSpecification = new BehaviorExecutionSpecification;
	interaction.addFragmentAt(besL2,indexOfMesMOS_R+1);
	
	message.getReceiveEvent().println();
	
	message.getReceiveEvent().println();
	sourceLifeline.println();
	var sourceBES = sourceLifeline.getBESStartedBy(message.getReceiveEvent());
	besL2.start = self.getMessageIn(interaction).getReceiveEvent();
	besL2.finish = sourceBES.getFinish();
	
	lifeline.getCoveredBys().add(message.getReceiveEvent());
	lifeline.getCoveredBys().add(besL2);
	lifeline.getCoveredBys().add(sourceBES.getFinish());
	
	sourceLifeline.removeCovered(message.getReceiveEvent());
	//sourceLifeline.removeCovered(sourceBES);
	sourceLifeline.removeCovered(sourceBES.getFinish());
}

operation Operation getDeployedNodesHwUtilization(th_maxHwUtil : Real) : List(Node){
	
	var listOfProcessNode : List(Node) = new List(Node);
	
	listOfProcessNode = self.getProcessNodes();
	
	var listOfProcessNodeWithUtilizationGreater : List(Node) = new List(Node);
	
	for(node in listOfProcessNode){
		if(node.hasStereotype('GaExecHost') ){
			var utilization = node.getValue(node.getStereotype('GaExecHost'), 'utilization')->first();
	 		if( utilization.isDefined() and utilization.asReal() >= th_maxHwUtil ){
				listOfProcessNodeWithUtilizationGreater.add(node);
			}
		}
	}
	
	return listOfProcessNodeWithUtilizationGreater;
}


//Fixing decomposition
operation Operation decomposition(){
	var owner = self.getOwner();
	
	var indices;
	
	var listOfInteraction = self.getAllInteractions();
	//check di controllo
	if(listOfInteraction.isEmpty()){
		"there was an error!!!".errln();
		return null;
	}
	
	var new_op := owner.createNewOperation(self);
	
	var mos = new MessageOccurrenceSpecification();

	for(interaction in listOfInteraction){
		indices = interaction.getIndexOf(self);
		var message_new_op = interaction.createMessage("new_"+new_op.getName());
		message_new_op.setSignature(new_op);
		for(index in indices){
			var loopFragment = interaction.createLoopFragmentAt(index);
			var loopFragmentOperand = loopFragment.getOperands()->first();
			
			var sendEvent = new MessageOccurrenceSpecification();
			sendEvent.setName("MOS_SendEvent_"+message_new_op.getName());
			loopFragmentOperand.getFragments().add(sendEvent);
			var receiveEvent = new MessageOccurrenceSpecification();
			receiveEvent.setName("MOS_ReceiveEvent_"+message_new_op.getName());
			loopFragmentOperand.getFragments().add(receiveEvent);
			
			message_new_op.setSendEvent(sendEvent);
			message_new_op.setReceiveEvent(receiveEvent);
			
			var ownerLifeline = owner.getLifeline(interaction);
			if(ownerLifeline.isUndefined()){
				"there was an error!!!".println();
				return 0;
			}
			ownerLifeline.getCoveredBys().add(sendEvent);			
			ownerLifeline.getCoveredBys().add(receiveEvent);			
		}
	}
	if(not owner.deleteOperation(self)){
		"[[ Method: deleteOperation(Operation) in operation.eol ]] ".errln("There was an error!!! ");
		return 0;
	}
}