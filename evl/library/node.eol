operation Node hasDeployment(artifact : Artifact) : Boolean{
	for(deployment in self.deployment){
		for(art in deployment.getDeployedArtifacts()){
			if(art == artifact){
				return true;
			}		
		}
	}
	return false;
}

//recupero la lista dei nodi connessi al componente
operation Node getDirectlyLinkedNode() : List(Node){
	var returnValue : List(Node) = new List(Node);
	
	//orderedSet
	for (prop in self.ownedAttribute){
		returnValue.add(prop.getType());
	}
	return returnValue;
}

//clone gli artefatti dal nodo splittato al nuovo nodo
operation Node cloneDeployedArtifactFrom(node : Node, component : Component){
	for(dep in node.getDeployedElements()){
		
		var newArtifact : Artifact = new Artifact; //creo l'artefatto
		var newManifestation; //e' la manifestazione del componente
		var newDeployment; //e' il deployment dell artefatto appena creato
		
		self.getNearestPackage().addElement(newArtifact); //aggiungo l'artefatto al package del nodo
		newArtifact.name = component.name; //setto il nome dell'artefatto come il componente
		
		//creo la manifestazione del componente sull artefatto
		newManifestation = newArtifact.createManifestation(component.name, component); 
			
		newDeployment = self.createDeployment(newArtifact.name); //creo il deploy sul nodo
		newDeployment.getDeployedArtifacts().add(newArtifact); //aggiungo al deploy l'artefatto
	}
}

//clone i collegamenti tra il nuovo nodo e i nodi collegati al nodo splittato
operation Node cloneLink(listOfLinkedNode : List(Property), packageContainer : Package){
	for(linkedNode in listOfLinkedNode){
		var linkedNodeEnd : Property = new Property;
		var selfEnd : Property = new Property;
		var commPath : CommunicationPath = new CommunicationPath;
		
		self.ownedAttribute.add(linkedNodeEnd);
		linkedNodeEnd.name = linkedNode.name;
		linkedNodeEnd.setType(linkedNode);	
		
		linkedNode.ownedAttribute.add(selfEnd);
		selfEnd.name = self.name;
		selfEnd.setType(self);
		
		packageContainer.addElement(commPath);
		commPath.name = "A_"+linkedNode.name+"_"+selfEnd.name;
		commPath.memberEnd.add(linkedNodeEnd);
		commPath.memberEnd.add(selfEnd);
	}
}


operation Node clone(component : Component){
		var newNode : Node = new Node; //creo il nuovo nodo
		var listOfLinkedNode = self.getDirectlyLinkedNode(); //recupero la lista dei link del nodo
		var packageContainer : Package = self.getNearestPackage();  //recupero il package container
		newNode.name = self.name+" Splitted";
		packageContainer.addElement(newNode);

		newNode.cloneAppliedStereotypesFrom(self); //clono gli stereotipi del nodo sorgente
		newNode.cloneDeployedArtifactFrom(self, component); //clono gli artefatti del nodo sorgente
		newNode.cloneLink(listOfLinkedNode, packageContainer);
}

operation Node clone(component : Component, reduction : Integer){
		var newNode : Node = new Node; //creo il nuovo nodo
		var listOfLinkedNode = self.getDirectlyLinkedNode(); //recupero la lista dei link del nodo
		var packageContainer : Package = self.getNearestPackage();  //recupero il package container
		newNode.name = self.name+" Splitted";
		packageContainer.addElement(newNode);

		newNode.cloneAppliedStereotypesFrom(self); //clono gli stereotipi del nodo sorgente
		newNode.cloneDeployedArtifactFrom(self, component); //clono gli artefatti del nodo sorgente
		newNode.cloneLink(listOfLinkedNode, packageContainer);
}

operation Node applyReductionOfUtilizationFrom(node : Node, percentage : Integer){
	var stereotype = node.getStereotype("GaExecHost");
	var reduction : Real = (percentage.asReal()/100)*(node.getValue(stereotype, "utilization")->first().asReal());
	var value : String = (node.getValue(stereotype, "utilization")->first().asReal() - reduction).asString();
	self.setValue(stereotype, "utilization", value );
}

operation Node getArtifactOf(component : Component) : Artifact{
	for(deployment in self.deployment){
		for(art in deployment.getDeployedArtifacts()){
			if(art.hasRepresentationOf(component)){
				return art;
			}		
		}
	}
	return null;
}

/*****************************************************************
 *							WARNING								 *
 *****************************************************************/
operation Node getUtilization() : Real{
	var utilization : Real;
	if(not self.hasStereotype("GaExecHost")){
		"the node < "+ self.name + " > is not correctly stereotyped".println();
		return null;
	}
	else{
		var selfUtilization = self.getValue(self.getStereotype("GaExecHost"), "utilization");
		if(selfUtilization.isDefined() and not selfUtilization.isEmpty()){
			return selfUtilization->first().asReal();
		}else{
			var artifacts = self.getArtifact();
			if(artifacts.isEmpty()){
				"the node < "+ self.name + " > does not manifest any artifact".println();
				return null;
			}else{
				for(art in artifacts){
					var listOfComponents = art.getManifestedComponents();
					if(listOfComponents.isDefined() and not listOfComponents.isEmpty()){
						for(com in listOfComponents){
							com.println();
							var utl = com.calculateUtilization();
							if(not utl.isEmpty()){
								utilization = utilization + utl.at(0).asReal() + utl.at(1).asReal();
							}
						}
					}
				}
			return utilization;
			}
		}
	}
}

operation Node getNeighboursWithLowUtilization() : Sequence(Node){
	var returnValue : Sequence(Node) = new Sequence(Node);
	
	var lanNode = self.getLinkedNetworkNode()->first();
	var comPaths = lanNode.getCommunicationPaths();
	
	for (cp in comPaths){
		for(me in cp.getMemberEnds()){
			if(me.getType().isTypeOf(Node) and me.getType() <> self and me.getType() <> lanNode and
				me.getType().hasStereotype("GaExecHost") and me.getType().hasLowUtilization()){
					returnValue.add(me.getType());
			}
		}
	}
	return returnValue;
}

operation Node getLinkedNetworkNode() : Sequence(Node) {
	
	var returnValue : Sequence(Node) = new Sequence(Node);
	
	for(cp in self.getCommunicationPaths()){
		for(me in cp.getMemberEnds()){
			if(me.getType().isTypeOf(Node) and me.getType().isNetworkNode()){
				returnValue.add(me.getType());
			}
		}
	}
	return returnValue;
}

operation Node getArtifact() : Sequence (Artifact){
	var returnValue : Sequence(Artifact) = new Sequence(artifact);
	for (dep in self.getDeployments()){
		for(sup in dep.supplier){
			if(sup.isTypeOf(Artifact)){
				returnValue.add(sup);
			}
		}
	}
	return returnValue;
}

operation Node isNetworkNode() : Boolean {
	return self.hasStereotype("GaCommHost");
}

operation Node isReachableByNetwork() : Boolean{
	for(cp in self.getCommunicationPaths()){
		for(me in cp.getMemberEnds()){
			if(me.getType().isNetworkNode()){
				return true;
			}
		}
	}
	return false;
}

operation Node hasLowUtilization() : Boolean {
	var th_minHwUtil : Real = 0.6;
	if(self.getUtilization().isDefined() and 
		(self.getUtilization().asReal() < th_minHwUtil) )
			return true;
	return false;
}

operation Node getCriticalDeployedComponent() : Component{
	var artifacts = self.getArtifact();
	artifacts.println();
	var criticalComponent : Component;
	var utilization : Real;
	for(art in artifacts){
		var components = art.getManifestedComponents();
		utilization = components->first().calculateTotalUtilization().asReal();
		criticalComponent = components->first();
		for(comp in components){
			if(utilization < comp.calculateTotalUtilization().asReal()){
				utilization = comp.calculateTotalUtilization();
				criticalComponent = comp;
			}
		}
	}	
	return criticalComponent;
}

operation Node calculateTotalUtilization() : Real{
	var utilization : Real = 0.0;
	var i : Integer = 0;
	
	for (utl in self.getUtilization() ){
		utilization = utilization.asReal() + utl.asReal();
		i= i+1;
	}
	utilization = utilization / i;
	return utilization;
}

operation Node getLessUsedNode() : Node{
	var lessUsedNode : Node;
	var utilization : Real = 1.0;
	var neighbours = self.getNeighboursWithLowUtilization();
	utilization = neighbours->first().calculateTotalUtilization();
	lessUsedNode = neighbours->first(); 
	for (n in neighbours){
		if(utilization < n.calculateTotalUtilization().asReal()){
		 	utilization = n.calculateTotalUtilization();
		 	lessUsedNode = n;
		}		
	}
	return lessUsedNode;
}

operation Node getNetworkUsage() : Real{
	var networkUsage : Real = 0.0;
	for(cp in self.getCommunicationPaths()){
		if(cp.hasStereotype("GaCommChannel")){
			networkUsage = networkUsage + cp.getValue(cp.getStereotype("GaCommChannel"),"utilization").asReal();
		}
	}
	
	if(not self.getCommunicationPaths.isEmpty()){
		networkUsage = networkUsage / self.getCommunicationPaths().size();	
	}
	
	return networkUsage;
}

/*********************************************************************************************
 *																							 *
 *	 									FIXING												 *
 *																							 *
 *********************************************************************************************/

//fixing 1
operation Node moveToNewComponentDeployedOnNewNode(){
	var criticalComponent = self.getCriticalDeployedComponent();
	var criticalOperation = criticalComponent.getCriticalOperation();
	
	criticalOperation.moveToNewComponentDeployedOnNewNode();
}

//fixing 2
operation Node moveToNewComponentDeployedOnNearLessUsedNode(){
	self.getCriticalDeployedComponent().getCriticalOperation().moveToNewComponentDeployedOnNearLessUsedNode();
}


//fixing 3 
operation Node redeployOnNearLessUsedNode() {
	var criticalComponent = self.getCriticalDeployedComponent();
	
	criticalComponent.getCriticalOperation().redeployOnNearLessUsedNode();
}

//fixing 4 
operation Node moveToLessCriticalComponent(){
	self.getCriticalDeployedComponent().getCriticalOperation().redeployOnNearLessUsedNode();
}

