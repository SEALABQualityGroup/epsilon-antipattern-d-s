operation Node hasDeployment(artifact : Artifact) : Boolean{
	for(deployment in self.deployment){
		for(art in deployment.getDeployedArtifacts()){
			if(art == artifact){
				return true;
			}		
		}
	}
	return false;
}

//recupero la lista dei nodi connessi al componente
operation Node getDirectlyLinkedNode() : List(Node){
	var returnValue : List(Node) = new List(Node);
	
	//orderedSet
	for (prop in self.ownedAttribute){
		returnValue.add(prop.getType());
	}
	return returnValue;
}

/***********************

	IT MUST BE CHECKED	

************************/
//FIXME Check the behavior

//clone gli artefatti dal nodo splittato al nuovo nodo
operation Node cloneDeployedArtifactFrom(node : Node, component : Component){
	for(dep in node.getDeployedElements()){
		
		var newArtifact : Artifact = new Artifact; //creo l'artefatto
		var newManifestation; //e' la manifestazione del componente
		var newDeployment; //e' il deployment dell artefatto appena creato
		
		self.getNearestPackage().addElement(newArtifact); //aggiungo l'artefatto al package del nodo
		newArtifact.name = component.name; //setto il nome dell'artefatto come il componente
		
		//creo la manifestazione del componente sull artefatto
		newManifestation = newArtifact.createManifestation(component.name, component); 
		//newManifestation.utilizedElement = component;
		
		//newArtifact.manifestation.add(newManifestation);
			
		//self.deployment.add(newDeployment);
		newDeployment = self.createDeployment(newArtifact.name); //creo il deploy sul nodo
		//newDeployment.name = newArtifact.name;
		newDeployment.getDeployedArtifacts().add(newArtifact); //aggiungo al deploy l'artefatto
	}
}

//clone i collegamenti tra il nuovo nodo e i nodi collegati al nodo splittato
operation Node cloneLink(listOfLinkedNode : List(Property), packageContainer : Package){
	for(linkedNode in listOfLinkedNode){
		var linkedNodeEnd : Property = new Property;
		var selfEnd : Property = new Property;
		var commPath : CommunicationPath = new CommunicationPath;
		
		self.ownedAttribute.add(linkedNodeEnd);
		linkedNodeEnd.name = linkedNode.name;
		linkedNodeEnd.setType(linkedNode);	
		
		linkedNode.ownedAttribute.add(selfEnd);
		selfEnd.name = self.name;
		selfEnd.setType(self);
		
		packageContainer.addElement(commPath);
		commPath.name = "A_"+linkedNode.name+"_"+selfEnd.name;
		commPath.memberEnd.add(linkedNodeEnd);
		commPath.memberEnd.add(selfEnd);
	}
}


operation Node clone(component : Component){
		var newNode : Node = new Node; //creo il nuovo nodo
		var listOfLinkedNode = self.getDirectlyLinkedNode(); //recupero la lista dei link del nodo
		var packageContainer : Package = self.getNearestPackage();  //recupero il package container
		newNode.name = self.name+" Splitted";
		packageContainer.addElement(newNode);

		newNode.cloneAppliedStereotypesFrom(self); //clono gli stereotipi del nodo sorgente
		newNode.cloneDeployedArtifactFrom(self, component); //clono gli artefatti del nodo sorgente
		newNode.cloneLink(listOfLinkedNode, packageContainer);
}

/***********************

	IT MUST BE CHECKED	

************************/
//FIXME Check the behavior
//VALUE zero dello stereotipo
operation Node clone(component : Component, reduction : Integer){
		var newNode : Node = new Node; //creo il nuovo nodo
		var listOfLinkedNode = self.getDirectlyLinkedNode(); //recupero la lista dei link del nodo
		var packageContainer : Package = self.getNearestPackage();  //recupero il package container
		newNode.name = self.name+" Splitted";
		packageContainer.addElement(newNode);

		newNode.cloneAppliedStereotypesFrom(self); //clono gli stereotipi del nodo sorgente
		newNode.cloneDeployedArtifactFrom(self, component); //clono gli artefatti del nodo sorgente
		newNode.cloneLink(listOfLinkedNode, packageContainer);
		//newNode.applyReductionOfUtilizationFrom(self, reduction);
}

operation Node applyReductionOfUtilizationFrom(node : Node, percentage : Integer){
	"into applyReduction".println();
	var stereotype = node.getStereotype("GaExecHost");
	node.println();
	stereotype.println();
	node.getValue(stereotype, "utilization").println();
	var reduction : Real = (percentage.asReal()/100)*(node.getValue(stereotype, "utilization")->first().asReal());
	reduction.println();
	var value : String = (node.getValue(stereotype, "utilization")->first().asReal() - reduction).asString();
	(node.getValue(stereotype, "utilization")->first().type()).println();
	value.type().println();
	self.setValue(stereotype, "utilization", value );
}

operation Node getArtifactOf(component : Component) : Artifact{
	for(deployment in self.deployment){
		for(art in deployment.getDeployedArtifacts()){
			if(art.hasRepresentationOf(component)){
				return art;
			}		
		}
	}
	return null;
}