import "antipattern/PaF.eol";
import "antipattern/CPS.eol";
import "antipattern/Blob.eol";
//import "antipattern/EP.eol";


//libraries
import "library/element.eol";
import "library/package.eol";
import "library/component.eol";
import "library/operation.eol";
import "library/interaction.eol";
import "library/artifact.eol";
import "library/manifestation.eol";
import "library/node.eol";
import "library/lifeline.eol";

import "fixing/splitting.eol";

/*********************************************************************************************
 *																							 *
 *	 									Constants									 		 *
 *																							 *
 *********************************************************************************************/


pre {
	var th_maxMsgs : Integer = 1;		
}

/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *																							 *
 *********************************************************************************************/

context Operation {
	critique PaF {
		check {
			if(self.PaF_F_probExec() and 
					self.PaF_resDemand() and
						(self.PaF_F_throughtput().size() > 0 or self.PaF_F_maxHwUtil().size() > 0 ) ){
							return false;
			}
			return true;
		}
		message : 'PaF <Operation> ' + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			do {
					self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIXING 2
				if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
					"there was an error".println();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.class.name+" to the less used neighbour Node"
			do{
				//FIXING 3
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.class.name+" to the one with the lowest demand"
			do{
				//FIXING 4
				self.moveToLessCriticalComponent();
			}
		}
		
	}
}

/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *																							 *
 *********************************************************************************************/
 
context Node {
	critique CPS {
		check {
			if(self.F_maxQl() and self.F_HwUtil())
				return false;
			return true;
		}
		message : 'CPS <' + self.type.name + '> ' + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
					self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIXING 2
				if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
					"there was an error".println();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				//FIXING 3
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				//FIXING 4
				self.moveToLessCriticalComponent();
			}
		}
	}
}

/*********************************************************************************************
 *																							 *
 *								Blob Controller & Container									 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 
context Component {
	critique Blob_Controller {
		check {
			if(  self.F_maxSupplierConnects() and self.F_numMsgsIn() and 
				(self.F_maxHwUtil() or self.F_maxNetUtil())
			)
				return false;
			return true;
		}
		message : 'Blob Controller <' + self.type.name + '> ' + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs.asInteger())){
					op.moveToNewComponentDeployedOnNewNode();
				}
				//self.moveToNewComponentDeployedOnNewNode();
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIXING 2
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.moveToNewComponentDeployedOnNearLessUsedNode();
				}
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				//FIXING 3
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.redeployOnNearLessUsedNode();
				}
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				//FIXING 4
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.moveToLessCriticalComponent();
				}
			}
		}
	}
}

context Component {
	critique Blob_dataContainer {
		check {
			if( self.F_maxClientConnects() and self.F_numMsgsOut() and 
				( self.F_maxNetUtil() or self.F_maxHwUtil())
			)
				return false;
			return true;
		}
		message : 'Blob Container <' + self.type.name + '> ' + self.name
		fix {
			title: "fix 1"
			do{
				"fix2".println();
			}
		}
	}
}

/*********************************************************************************************
 *																							 *
 *	 								Extensive Processing  									 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/

context Component{
	guard : self.hasStereotype('PaRunTInstance') 
	critique EP{
		check{
			if(self.getOwnedOperations().size() < 2 and
				self.EP_resDemand()){
				return true;
			}
			return false;
		}
		message : 'Extensive Processing for <'+self.type.name+'> '+self.name
		fix{
			title : "Fix title"
			do{
				"fix".println();				
			}
		}
	}
}