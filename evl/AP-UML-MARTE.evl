import "metric_functions.eol";

//libraries
import "library/element.eol";
import "library/package.eol";

import "library/classifier.eol";
import "library/class.eol";
import "library/component.eol";

import "library/operation.eol";
import "library/interaction.eol";
import "library/artifact.eol";
import "library/manifestation.eol";
import "library/node.eol";
import "library/lifeline.eol";
import "library/interface.eol";
import "library/message.eol";


/*********************************************************************************************
 *																							 *
 *	 									THRESHOLDS									 		 *
 *																							 *
 *********************************************************************************************/
pre {
	/******** DESIGN **************/
	var th_maxMsgs : Integer = 3;
	var th_maxRemMsgs : Integer = 3;
	var th_maxRemInst : Integer = 1; 
	var th_maxConnects : Integer = 4;
	var th_maxExF : Integer = 2;
	
	/******** PERFORMANCE **************/
	
	//Resource Demand
	var th_maxResDemand : List( Real ) = new List( Real );
	th_maxResDemand.add(15); //computation
	th_maxResDemand.add(7); //storage
	th_maxResDemand.add(5); //bandwidth
	
	var th_minResDemand : List( Real ) = new List( Real );
	th_minResDemand.add(5); //computation
	th_minResDemand.add(10); //storage
	th_minResDemand.add(3); //bandwidth
	
	//Hw Utilization
	var th_maxHwUtil : Real = 0.85;
	
	//Network utilization
	var th_maxNetUtil : Real = 0.9; 
	var th_minNetUtil : Real = 0.5;
	
	var th_SrtReq : Real = 15; //response time
	
	var th_SthReq = 0.9; //throughput
	var th_maxQL : Integer = 16; //queue lenght
}

/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *																							 *
 *********************************************************************************************/

context Operation {
	critique PaF {
		check {
			if(self.F_probExec() and 
				self.F_resDemand(th_maxResDemand) and
					(not self.F_T(th_SthReq) or not self.F_maxHwUtil(th_maxHwUtil) ) ){
						return false;
			}
			return true;
		}
		message : 'PaF <Operation> ' + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			do {
				//FIX 1
				//self.moveToNewComponentDeployedOnNewNode(); 
				self.moveToNewOwnerDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIX 2
				if(not self.moveToNewOwnerDeployedOnNearLessUsedNode())
					"there was an error".println();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.class.name+" to the less used neighbour Node"
			do{
				//FIX 3
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.class.name+" to the one with the lowest demand"
			do{
				//FIX 4
				self.moveToLessCriticalOwner();
			}
		}
		
	}
}


/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *																							 *
 *********************************************************************************************/
 
context Node {
	critique CPS {
		check {
			if(self.F_maxQL(th_maxQL) and self.F_maxHwUtil(th_maxHwUtil))
				return false;
			return true;
		}
		message : 'CPS <' + self.type.name + '> ' + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIXING 2
				if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
					"there was an error".println();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				//FIXING 3
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				//FIXING 4
				self.moveToLessCriticalComponent();
			}
		}
	}
}

/*********************************************************************************************
 *																							 *
 *	 								Extensive Processing  									 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 context Component {
 	critique ExtensiveProcessingAP{
 		check{
 			if(self.F_resDemand(th_maxResDemand, th_minResDemand) and 
 				self.F_probExec() and 
 				( self.F_maxHwUtil(th_maxHwUtil)) or self.F_RT(th_SrtReq) )
 				return false;
 			return true;
 		}
 		message : 'EP <' + self.type.name + '> ' + self.name
 		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
				self.moveToNewComponentDeployedOnNewNode(); 
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIXING 2
				if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
					"there was an error".println();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				//FIXING 3
				self.redeployOnNearLessUsedNode();
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				//FIXING 4
				self.moveToLessCriticalComponent();
			}
		}
 	}
}

/*********************************************************************************************
 *																							 *
 *								Blob Controller & Container									 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 
context Component {
	critique Blob_Controller {
		check {
			if( self.F_numClientConnects(th_maxConnects) and self.F_numMsgsIn(th_maxMsgs) and 
				(self.F_maxHwUtil(th_maxHwUtil) or self.F_maxNetUtil(th_maxNetUtil))
			)
				return false;
			return true;
		}
		message : 'Blob Controller <' + self.type.name + '> ' + self.name
		fix {
			title: "Reduce Client Connects <"+ self.name +">"
			
			do {
				self.reduceNumberOfClientConnects(th_maxConnects);
			}
		}
	}
}

context Component {
	critique Blob_dataContainer {
		check {
			if( self.F_numSupplierConnects(th_maxConnects) and self.F_numMsgsOut(th_maxMsgs) and 
				( self.F_maxHwUtil(th_maxHwUtil) or self.F_maxNetUtil(th_maxNetUtil) )
			)
				return false;
			return true;
		}
		message : 'Blob Container <' + self.type.name + '> ' + self.name
		fix {
			title: "Reduce Supplier Connects of <"+ self.name +">"
			do{
				self.reduceNumberOfSupplierConnects();
			}
		}
	}
}


/*********************************************************************************************
 *																							 *
 *	 								Empty Semi Truck										 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 context Component {
 	critique EmptySemiTruck{
 		check{
 			if(self.F_numRemMsgs(th_maxRemMsgs) and 
 				(self.F_maxNetUtil(th_minNetUtil) or self.F_numRemInst(th_maxRemInst))
 			)
 				return false;
 			return true;
 		}
 		message : 'EST <' + self.type.name + '> ' + self.name
 		fix {
			title : "Apply Session Facade Pattern"
			do {
				self.applySessionFacade();
			}
		}
 	}
}
/*********************************************************************************************
 *																							 *
 *	 								Tower of Babel											 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 context Component {
 	critique TowerOfBabel{
 		check{
 			if(self.F_numExF(th_maxExF) and self.F_maxHwUtil(th_maxHwUtil))
 				return false;
 			return true;
 		}
 		message : 'ToB <' + self.type.name + '> ' + self.name
 		fix {
			title : "Apply the most used format"
			do {
				self.applyStandardFormat();
			}
		}
 	}
}

/*
context Component {
	critique Blob_Controller {
		check {
			if( self.F_numClientConnects(th_maxConnects) and self.F_numMsgsIn(th_maxMsgs) and 
				(self.F_maxHwUtil(th_maxHwUtil) or self.F_maxNetUtil(th_maxNetUtil))
			)
				return false;
			return true;
		}
		message : 'Blob Controller <' + self.type.name + '> ' + self.name
		fix {
			title : "Move it to a new Component deployed to a new Node"
			
			do {
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.moveToNewComponentDeployedOnNewNode();
				}
				//self.moveToNewComponentDeployedOnNewNode();
			}
		}
		fix{
			title : "Move it to a new Component deployed to the less used neighbour Node"
			do{
				//FIXING 2
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.moveToNewComponentDeployedOnNearLessUsedNode();
				}
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				//FIXING 3
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.redeployOnNearLessUsedNode();
				}
			}
		}
		fix{
			title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
			do{
				//FIXING 4
				for(op in self.getCriticalOperations4BlobControllerAP(th_maxMsgs)){
					op.moveToLessCriticalComponent();
				}
			}
		}
	}
}

context Component {
	critique Blob_dataContainer {
		check {
			if( self.F_numSupplierConnects(th_maxConnects) and self.F_numMsgsOut(th_maxMsgs) and 
				( self.F_maxHwUtil(th_maxHwUtil) or self.F_maxNetUtil(th_maxNetUtil) )
			)
				return false;
			return true;
		}
		message : 'Blob Container <' + self.type.name + '> ' + self.name
		fix {
			title: "fix 1"
			do{
				"fix2".println();
			}
		}
	}
}

*/