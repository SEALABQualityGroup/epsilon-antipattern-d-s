/*********************************************************************************************
 *																							 *
 *										DESIGN												 *
 *																							 *
 *********************************************************************************************/

operation Message F_probExec() : Boolean{
	if(self.getMessageKind().asString() <> "found"){
		var intOperand = self.getSendEvent().getOwner();
		
		if(not self.hasStereotype("GaStep") and not self.hasStereotype("GaAcqStep"))
			return false;
		if(intOperand.isUndefined() or (intOperand.isDefined() and not intOperand.isTypeOf(InteractionOperand))){
			return true; //probalita' uguale ad 1
		}else{
			if(intOperand.hasStereotype("GaStep")){
				if(intOperand.getValue(intOperand.getStereotype("GaStep"), "prob").isDefined() and intOperand.getValue().asReal == 1.0){
					return true; //probabilita' uguale a 1
				}
			}
		}
	}
	return false;
}

operation Operation F_probExec() : Boolean{
	var listOfMes = self.getAllOwnMessages();
	var listOfIntOperands = self.getOwnerInteractionOperands();
	if(not self.hasStereotype("GaStep"))
		return false;
	if(listOfMes.isEmpty())
		return false; //non ci sono mes dell'op quindi prob=0
	if(listOfIntOperands.isEmpty())
		return true; //se non e' in un interaction operand e' sicuramente eseguita almeno una volta
	for(int in listOfIntOperands){
		if( int.hasStereotype("GaStep") and (int.getValue(int.getStereotype("GaStep"), "prob").asReal() == 1) )
			return true; //op in un interaction operand eseguita con prob 1
	}
	return false;
}

operation Component F_probExec() : Boolean {
	var opGreater = self.getOperationsWithResDemandGreaterOrEqual(th_maxResDemand);
	var opLesser = self.getOperationsWithResDemandLesserThan(th_minResDemand);
	
	for (opG in opGreater){
		var opGInteractionOperands = opG.getOwnerInteractionOperands();
		for(opL in opLesser){
			for(opLInteractionOperand in opL.getOwnerInteractionOperands()){
				for(opGInteractionOperand in opGInteractionOperands){
					if( (opGInteractionOperand.getValue(opGInteractionOperand.getStereotype("GaStep"), "prob").asReal() + 
					opLInteractionOperand.getValue(opLInteractionOperand.getStereotype("GaStep"), "prob").asReal() ) == 1 )
						return true;
				}
			}
		}
	}
	return false;
}

operation Component F_numClientConnects(th_maxConnects : Integer) : Boolean{
	
	if(not self.hasStereotype("PaRunTInstance")) 
		return false;

   	if(self.getRequireds().size() >= th_maxConnects){
		return true;
	}
	return false;
}

operation Component F_numMsgsIn(th_maxMsgs : Integer) : Boolean{
	
	//finds the list of critical messages into every interactions, which own the critical component	
	if(not self.getCriticalMessages4BlobControllerAP(th_maxMsgs).isEmpty())
		return true;
	return false;
}

operation Component F_numMsgsOut(th_maxMsgs : Integer) : Boolean{
	if(not self.getCriticalLifeline4BlobContainerAP(th_maxMsgs).isEmpty())
		return true;
	return false;
}

operation Component F_numSupplierConnects(th_maxConnects : Integer) : Boolean{

	if(not self.hasStereotype("PaRunTInstance")) 
		return false;

	if(self.getProvideds().size() >= th_maxConnects)
		return true;
	return false;
}

operation Component F_numRemMsgs(th_maxRemMsgs : Integer) : Boolean{
	if(self.countRemoteMessages(th_maxRemMsgs))
		return true;
		
	return false;
}

operation Classifier F_numRemMsgs(th_maxRemMsgs : Integer) : Boolean{
	if(self.countRemoteMessages(th_maxRemMsgs))
		return true;
		
	return false;
}

operation Component F_numRemInst(th_maxRemInst : Integer) : Boolean{
	if(self.countRemoteInstances(th_maxRemInst))
		return true;
	return false;
}

operation Classifier F_numRemInst(th_maxRemInst : Integer) : Boolean{
	if(self.countRemoteInstances(th_maxRemInst))
		return true;
	return false;
}

operation Component F_numExF(th_maxExF : Integer ) : Boolean{
	if(self.hasStereotype("PaRunTInstance") and not self.getUsedFormat().isEmpty()){
		for(int in self.getUsedFormat().keySet()){
			if(self.getUsedFormat().get(int).keySet().size() >= th_maxExF ){
				return true;
			}
		}
	}
	return false;
}

/*********************************************************************************************
 *																							 *
 *									PERFORMANCE												 *
 *																							 *
 *********************************************************************************************/
operation Operation F_resDemand(th_maxResDemand : List(Real)) : Boolean{

	var turnback : Boolean = true;
	
	if(not self.hasStereotype("GaStep"))
		return false;
	
	var gaStep = self.getStereotype('GaStep');
	var servCount = self.getValue(gaStep, 'servCount');
	
	var i : Integer = 0;
	if(servCount.isDefined() and servCount.size() == 0){
		turnback = false;
	}else{
		for(demand in servCount){
			
			if(demand.asReal() < th_maxResDemand.at(i) ){ //al primo demand non > della soglia relativa ritorna false
				turnback = false;
				break;
			}
			i = i+1;
		}
	}
	return turnback;	
}


operation Message F_resDemand(th_maxResDemand : Real) : Boolean{

	var turnback : Boolean = false;
	
	if(self.hasStereotype("GaStep")){
		var gaStep = self.getStereotype("GaStep");
		var servCount = self.getValue(gaStep, "servCount");
		for(demand in servCount){
			if(demand.asReal() < th_maxResDemand.at(i) ){ //al primo demand non > della soglia relativa ritorna false
				turnback = false;
				break;
			}
			i = i+1;
		}
	}
	return turnback;	
}

operation Operation F_resDemand() : Boolean{
	var th_maxResDemand : List( Real ) = new List( Real );
	th_maxResDemand.add(15); //computation
	th_maxResDemand.add(7); //storage
	th_maxResDemand.add(5); //bandwidth
	var turnback : Boolean = true;
	
	var appliedStereotypes = self.getAppliedStereotypes();
	
	if(not self.hasStereotype("GaStep"))
		return false;
		
	var gaStep = self.getStereotype('GaStep');
	var servCount = self.getValue(gaStep, 'servCount');
	
	var i : Integer = 0;

	if(servCount.isDefined() and servCount.size() == 0){
		turnback = false;
	}else{
		for(demand in servCount){
			if(demand.asReal() < th_maxResDemand.at(i) ){ //al primo demand non > della soglia relativa ritorna false
				turnback = false;
				break;
			}
			i = i+1;
		}
	}
	return turnback;	
}

operation Component F_resDemand(th_maxOpResDemand : List( Real ), th_minResDemand : List( Real )) : Boolean{
	if(not self.hasStereotype("PaRunTInstance") ) 
		return false;
				
	var opGreater = self.getOperationsWithResDemandGreaterOrEqual(th_maxOpResDemand);
	var opLesser = self.getOperationsWithResDemandLesserThan(th_minResDemand);
	
	//ho almeno un'operazione con un utilizzazione maggiore ed una con un'utilizzazione minore
	//delle threshold
	if(not opGreater.isEmpty() and not opLesser.isEmpty()){
		return true;
	}
	return false;
}

operation Operation F_T(th_SthReq : Real) : Boolean{
	
	var listOfUseCases : List(UseCase) = self.getUseCases(); 
	var listOfUseCaseWithThroughputLessThanThreshold : List(UseCase) = new List(UseCase);
	if(listOfUseCases.isEmpty()){
		return false; //non ci sono use case legati all'operazione
	}
	for(useCase in listOfUseCases){
		if(useCase.hasStereotype('GaScenario')){
			var throughput = useCase.getValue(useCase.getStereotype('GaScenario'), "throughput")->first();
			if(throughput.isDefined() and throughput.asReal() < th_SthReq){
				listOfUseCaseWithThroughputLessThanThreshold.add(useCase);
			}
		}
	}
	return listOfUseCaseWithThroughputLessThanThreshold.isEmpty();
}

operation Message F_T() : Boolean{
	var th_SthReq = 0.9; //throughput
	var useCase : UseCase = self.getUseCase(); 
	
	if(useCase.hasStereotype('GaScenario')){
		var throughput = useCase.getValue(useCase.getStereotype('GaScenario'), "throughput")->first();
		if(throughput.isDefined() and throughput.asReal() < th_SthReq){
			return true;	
		}
	}
	
	return false;
}

operation Message F_T() : Real{
	var th_SthReq = 0.9; //throughput
	var useCase : UseCase = self.getUseCase(); 
	
	if(useCase.hasStereotype('GaScenario')){
		var throughput = useCase.getValue(useCase.getStereotype('GaScenario'), "throughput")->first();
		if(throughput.isDefined() ){
			return throughput.asReal();	
		}
	}
	
	return 0;
}

operation Operation F_T() : Boolean{
	var th_SthReq = 0.9; //throughput
	var listOfUseCases : List(UseCase) = self.getUseCases(); 
	
	var listOfUseCaseWithThroughputLessThanThreshold : List(UseCase) = new List(UseCase);
	
	for(useCase in listOfUseCases){
		if(useCase.hasStereotype('GaScenario')){
			var throughput = useCase.getValue(useCase.getStereotype('GaScenario'), "throughput")->first();
			if(throughput.isDefined() and throughput.asReal() < th_SthReq){
				listOfUseCaseWithThroughputLessThanThreshold.add(useCase);	
			}
		}
	}
	return listOfUseCaseWithThroughputLessThanThreshold.isEmpty();
}

operation Message F_maxHwUtil(th_maxHwUtil : Real) : Boolean{
	return self.getSignature().F_maxHwUtil(th_maxHwUtil);
}

operation Operation F_maxHwUtil(th_maxHwUtil : Real) : Boolean{
	
	var listOfProcessNode : List(Node) = new List(Node);
	
	listOfProcessNode = self.getProcessNodes();

	if(listOfProcessNode.isEmpty()){
		return false; //non ci sono nodi con lo stereotipo giusto o la classe non è deployata
	}	
	var listOfProcessNodeWithUtilizationGreater : List(Node) = new List(Node);
	
	for(node in listOfProcessNode){
		if(node.hasStereotype('GaExecHost') ){
			var utilization = node.getValue(node.getStereotype('GaExecHost'), 'utilization')->first();
	 		if( utilization.isDefined() and utilization.asReal() >= th_maxHwUtil ){
				listOfProcessNodeWithUtilizationGreater.add(node);
			}
		}
	}
	return listOfProcessNodeWithUtilizationGreater.isEmpty();
}

operation Operation F_maxHwUtil() : Boolean{
	var th_maxHwUtil : Real = 0.85;
	var listOfProcessNode : List(Node) = new List(Node);
	
	listOfProcessNode = self.getProcessNodes();
	
	var listOfProcessNodeWithUtilizationGreater : List(Node) = new List(Node);
	
	for(node in listOfProcessNode){
		if(node.hasStereotype('GaExecHost') ){
			var utilization = node.getValue(node.getStereotype('GaExecHost'), 'utilization')->first();
	 		if( utilization.isDefined() and utilization.asReal() >= th_maxHwUtil ){
				listOfProcessNodeWithUtilizationGreater.add(node);
			}
		}
	}
	return listOfProcessNodeWithUtilizationGreater.isEmpty();
}

operation Node F_maxHwUtil(th_maxHwUtil : Real) : Boolean {
	
	var utilization = self.getUtilization();
	if(utilization.isUndefined()){
		return false;
	}else{
		//CPU and DISK of Component
		if( utilization.asReal() >= th_maxHwUtil){
			if ( self.getNeighboursWithLowUtilization().isUndefined() or self.getNeighboursWithLowUtilization().isEmpty() ){
				return false;			
			}
			return true;
		}
	}
	return false;
}

operation Component F_maxHwUtil(th_maxHwUtil : Real) : Boolean{
	if(not self.getNodesWithUtilizationGreaterThan(th_maxHwUtil).isEmpty())
		return true;
	return false;	
}

operation Node F_maxQL(th_maxQL : Integer) : Boolean {
	
	if(self.hasStereotype("RtUnit") and
		self.getValue(self.getStereotype("RtUnit"), "queueSize").isDefined() and 
			self.getValue(self.getStereotype("RtUnit"), "queueSize").asInteger() > th_maxQL ){
		return true;
	}
	return false;
}

operation Component F_maxNetUtil(th_maxNetUtil : Real) : Boolean{
	if(not self.getNodesWithNetworkUsageGreaterThan(th_maxNetUtil).isEmpty())
		return true;
	return false;
}

operation Classifier F_maxNetUtil(th_maxNetUtil : Real) : Boolean{
	if(not self.getNodesWithNetworkUsageGreaterThan(th_maxNetUtil).isEmpty())
		return true;
	return false;
}

operation Component F_minNetUtil(th_minNetUtil : Real) : Boolean{
	if(not self.getNodesWithNetworkUsageLesserThan(th_minNetUtil).isEmpty())
		return true;
	return false;
}

//TODO da rivedere
operation Component F_RT(th_SrtReq : Real) : Boolean {
	var opGreater = self.getOperationsWithResDemandGreaterOrEqual(th_maxResDemand);
	var opLesser = self.getOperationsWithResDemandLesserThan(th_minResDemand);

	var opG_Messages : Sequence(Message) = new Sequence(Message);
	var messageList : List(Operation) = new List(Operation);
	var operationMap : Map(UseCase, List(Message)) = new Map(UseCase, List(Message));
	
	for (opG in opGreater){
		var opG_Interactions = opG.getAllInteractions();
		for(int in opG_Interactions){
			for(mes in opG.getMessagesIn(int) ){
				//verifico se il mes e' contenuto in un alternative fragment (AF)
				//TODO capire se c'e' un modo migliore per individuare un AF
				if( mes.getSendEvent().getOwner().getOwner().isTypeOf(CombinedFragment) )
					opG_Messages.add(mes); //lista di mes che rappresentano la opG e sono contenuti in un AF
			}
		}
	}
	for(opL in opLesser){
		var opL_Interactions = opL.getAllInteractions();
		for(int in opL_Interactions){
			for(mes in opL.getMessagesIn(int) ){
				//verifico se il mes e' contenuto in un alternative fragment (AF)
				//TODO capire se c'e' un modo migliore per individuare un AF
				var opL_InteractionOperand = mes.getSendEvent().getOwner();
				for(opG_Message in opG_Messages){
					var opG_InteractionOperand = opG_Message.getSendEvent().getOwner();
					if( opL_InteractionOperand.getOwner().isTypeOf(CombinedFragment) and
							opL_InteractionOperand.getOwner() == opG_InteractionOperand.getOwner() and 
								opL_InteractionOperand <> opG_InteractionOperand){
						if( opL_InteractionOperand.hasStereotype("GaStep") and opG_InteractionOperand.hasStereotype("GaStep") and 
								( opL_InteractionOperand.getValue(opL_InteractionOperand.getStereotype("GaStep"), "prob").asReal() + 
									opG_InteractionOperand.getValue(opG_InteractionOperand.getStereotype("GaStep"), "prob").asReal() == 1)
						){
							messageList.add(opG_Message);
							messageList.add(mes);
						}											
					}	
				}
			}
			if(not messageList.isEmpty()){
				operationMap.put(int.getUseCase(), messageList.clone());
			}
			messageList.clear();
		}
	}
	var criticalUCs : List(UseCase) = new List(UseCase);
	for(uc in operationMap.keySet()){	
		if(uc.getValue(uc.getStereotype("GaScenario"), "respT")->first().asReal() >= th_SrtReq )
			criticalUCs.add(uc);
	}
	if(not criticalUCs.isEmpty()){
		return true;
	}
	return false;
}