operation Node CPS_deployment_queue() : Boolean {
	var Th_maxQL : Real := 70.0;
	/*if (self.hasValue(self.getStereotype('RtBehavior'), 'queueSize')) 
		return self.getValue(self.getStereotype('RtBehavior'), 'queueSize').asReal() < Th_maxQL;
	else
		return true;
	*/
	return false;
}

operation Node CPS_deployment_unbalancedNodes() : Boolean {
	var Th_maxHwUtil : Real := 0.7;
	var Th_minHwUtil : Real := 0.3;
	var selfUtil : Real := 0.0;	
	var selfNeighboursWithLowUtil := Sequence{};
	/*if (self.hasStereotype('GaExecHost') and self.hasValue(self.getStereotype('GaExecHost'), 'utilization')) 
			selfUtil := self.getValue(self.getStereotype('GaExecHost'), 'utilization')->first().asReal();
	if(selfUtil >= Th_maxHwUtil) {
		var selfNeighbours := self.getNodeNeighbours();
		--System.user.inform('Node ' + self.name + ' Neighbours: ' + selfNeighbours->collect(n | n.name)->asString());		
		selfNeighboursWithLowUtil := 
			selfNeighbours->select(n | n.hasValue(n.getStereotype('GaExecHost'), 'utilization') 
						and n.getValue(n.getStereotype('GaExecHost'), 'utilization')->first().asReal() < Th_minHwUtil);
	}
	else
		return true;
	return selfNeighboursWithLowUtil->isEmpty();
	*/
	return false;
}
