//import "../evl/antipattern/PaF.eol";
import "../evl/metric_functions.eol";

//libraries
import "../evl/library/element.eol";
import "../evl/library/package.eol";
import "../evl/library/component.eol";
import "../evl/library/operation.eol";
import "../evl/library/interaction.eol";
import "../evl/library/artifact.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/node.eol";
import "../evl/library/lifeline.eol";
import "../evl/library/interface.eol";
import "../evl/library/message.eol";

//fixing
import "../evl/fixing/splitting.eol";

//thresholds

import "thresholds.eol";


/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *																							 *
 *********************************************************************************************/

//FIX 1
wizard newComponent {
	guard : 
		self.isTypeOf(Operation) and
			self.F_probExec() and self.F_resDemand() and
						( self.F_T() or self.F_maxHwUtil() ) 			
	title : "Move it to a new Component deployed to a new Node"
	do {
 		self.moveToNewComponentDeployedOnNewNode();
	} 
}
//FIX 2
wizard newComponent_N_L_U_Node {
	guard : 
		self.isTypeOf(Operation) and
			self.F_probExec() and self.F_resDemand() and
						( self.F_T() or self.F_maxHwUtil() )  		
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do {
 		self.moveToNewComponentDeployedOnNearLessUsedNode();
	} 
}
//FIX 3
wizard redeployComponent_N_L_U_Node {
	guard : 
		self.isTypeOf(Operation) and
			self.F_probExec() and self.F_resDemand() and
						( self.F_T() or self.F_maxHwUtil() ) 		
	title : "Redeploy its owning Component "+self.class.name+" to the less used neighbour Node"
	do {
 		self.redeployOnNearLessUsedNode();
	} 
}
//FIX 4
wizard redeployComponent_N_L_U_Node {
	guard : 
		self.isTypeOf(Operation) and
			self.F_probExec() and self.F_resDemand() and
						( self.F_T() or self.F_maxHwUtil() ) 
	title : "Change its owning Component from "+self.class.name+" to the one with the lowest demand"
	do {
 		self.moveToLessUsedComponent();
	} 
}



/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *																							 *
 *********************************************************************************************/
 
/*wizard Node {
		guard: 
			self.F_maxQl() and self.F_HwUtil()
		
		title : "Move it to a new Component deployed to a new Node"
		do {
			self.moveToNewComponentDeployedOnNewNode(); 
		}
}

wizard Node{
	guard: self.F_maxQl() and self.F_HwUtil()
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do{
		//FIXING 2
		if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
			"there was an error".println();
	}
}
		
wizard Node{
	guard: self.F_maxQl() and self.F_HwUtil()
	title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
	do{
		//FIXING 3
		self.redeployOnNearLessUsedNode();
	}
}

wizard Node{
	guard: self.F_maxQl() and self.F_HwUtil()
	title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
	do{
		//FIXING 4
		self.moveToLessCriticalComponent();
	}
}*/
