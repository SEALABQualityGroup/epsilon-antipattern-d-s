import "../evl/antipattern/PaF.eol";
//import "antipattern/EP.eol";

//libraries
import "../evl/library/element.eol";
import "../evl/library/package.eol";
import "../evl/library/component.eol";
import "../evl/library/operation.eol";
import "../evl/library/interaction.eol";
import "../evl/library/artifact.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/node.eol";
import "../evl/library/lifeline.eol";

//fixing
import "../evl/fixing/splitting.eol";


/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *																							 *
 *********************************************************************************************/

//FIXING 1
wizard newComponent {
	guard : 
		self.isTypeOf(Operation) and
			self.hasStereotype('GaStep') and self.hasStereotype('GaScenario') and
				self.PaF_F_probExec() and 
					self.PaF_resDemand() and
						(not self.PaF_F_throughtput().isEmpty() or not self.PaF_F_maxHwUtil().isEmpty() ) 
					
	title : "Move it to a new Component deployed to a new Node"
	do {
 		self.moveToNewComponentDeployedOnNewNode(20.0);
	} 
}

//FIXING 2
wizard newComponent_N_L_U_Node {
	guard : 
		self.isTypeOf(Operation) and
			self.hasStereotype('GaStep') and self.hasStereotype('GaScenario') and
				self.PaF_F_probExec() and 
					self.PaF_resDemand() and
						(not self.PaF_F_throughtput().isEmpty() or not self.PaF_F_maxHwUtil().isEmpty() )  
					
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do {
 		self.moveToNewComponentDeployedOnNearLessUsedNode(20.0);
	} 
}

//FIXING 3
wizard redeployComponent_N_L_U_Node {
	guard : 
		self.isTypeOf(Operation) and
			self.hasStereotype('GaStep') and self.hasStereotype('GaScenario') and
				self.PaF_F_probExec() and 
					self.PaF_resDemand() and
						(not self.PaF_F_throughtput().isEmpty() or not self.PaF_F_maxHwUtil().isEmpty() ) 
					
	title : "Redeploy its owning Component "+self.class.name+" to the less used neighbour Node"
	do {
 		self.redeployOnNearLessUsedNode(20.0);
	} 
}

//FIXING 4
wizard redeployComponent_N_L_U_Node {
	guard : 
		self.isTypeOf(Operation) and
			self.hasStereotype('GaStep') and self.hasStereotype('GaScenario') and
				self.PaF_F_probExec() and 
					self.PaF_resDemand() and
						(not self.PaF_F_throughtput().isEmpty() or not self.PaF_F_maxHwUtil().isEmpty() ) 
					
	title : "Change its owning Component from "+self.class.name+" to the one with the lowest demand"
	do {
 		self.moveToLessUsedComponent(20.0);
	} 
}



/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *																							 *
 *********************************************************************************************/
 
wizard Node {
		guard: self.F_maxQl() and self.F_HwUtil()
		
		title : "Move it to a new Component deployed to a new Node"
		do {
			self.moveToNewComponentDeployedOnNewNode(); 
		}
}

wizard Node{
	guard: self.F_maxQl() and self.F_HwUtil()
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do{
		//FIXING 2
		if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
			"there was an error".println();
	}
}
		
wizard Node{
	guard: self.F_maxQl() and self.F_HwUtil()
	title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
	do{
		//FIXING 3
		self.redeployOnNearLessUsedNode();
	}
}

wizard Node{
	guard: self.F_maxQl() and self.F_HwUtil()
	title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
	do{
		//FIXING 4
		self.moveToLessCriticalComponent();
	}
}
