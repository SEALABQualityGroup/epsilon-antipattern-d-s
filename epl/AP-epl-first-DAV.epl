import "../evl/antipattern/PaF.eol";
//import "antipattern/EP.eol";

//libraries
import "../evl/library/element.eol";
import "../evl/library/package.eol";
import "../evl/library/component.eol";
import "../evl/library/operation.eol";
import "../evl/library/interaction.eol";
import "../evl/library/artifact.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/node.eol";
import "../evl/library/lifeline.eol";

//fixing
import "../evl/fixing/splitting.eol";

/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *																							 *
 *********************************************************************************************/
 
//Fix 1
pattern Move_it_to_a_new_Component_deployed_to_a_new_Node
	mainRole : Operation {
	match : 
		mainRole.F_probExec() and mainRole.F_resDemand(th_maxResDemand) and
		( mainRole.F_T(th_SthReq) or op.F_maxHwUtil(th_maxHwUtil) )  				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.moveToNewComponentDeployedOnNewNode();
	}
}
//Fix 2
pattern Move_it_to_a_new_Component_deployed_to_the_less_used_neighbour_Node
	mainRole : Operation {
	match : 
		mainRole.F_probExec() and mainRole.F_resDemand(th_maxResDemand) and
		( mainRole.F_T(th_SthReq) or op.F_maxHwUtil(th_maxHwUtil) )  				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.moveToNewComponentDeployedOnNearLessUsedNode();
	}
}
//Fix 3
pattern Redeploy_owner_Component_to_the_less_used_neighbour_Node
	mainRole : Operation {
	match : 
		mainRole.F_probExec() and mainRole.F_resDemand(th_maxResDemand) and
		( mainRole.F_T(th_SthReq) or op.F_maxHwUtil(th_maxHwUtil) )  				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.redeployOnNearLessUsedNode();
	}
}
//Fix 4
pattern Move_it_to_the_less_critical_Component
	mainRole : Operation {
	match : 
		mainRole.F_probExec() and mainRole.F_resDemand(th_maxResDemand) and
		( mainRole.F_T(th_SthReq) or op.F_maxHwUtil(th_maxHwUtil) )  				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		"4".println();
		mainRole.moveToLessCriticalComponent();
	}
}

/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *																							 *
 *********************************************************************************************
 
pattern Move_its_critical_Operation_to_a_new_Component_deployed_to_a_new_Node 
	mainRole : Node{
	match: mainRole.F_maxQl() and mainRole.F_HwUtil()		
	do {
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		self.moveToNewComponentDeployedOnNewNode(); 
	}
}

pattern Move_its_critical_Operation_to_a_new_Component_deployed_to_the_less_used_neighbour_Node 
	mainRole : Node{
	match: mainRole.F_maxQl() and mainRole.F_HwUtil()		
	do{
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		//FIXING 2
		if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
			"there was an error".println();
	}
}

pattern Redeploy_its_critical_Component_to_the_less_used_neighbour_Node 
	mainRole : Node{
	match: mainRole.F_maxQl() and mainRole.F_HwUtil()		
	do{
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		//FIXING 3
		self.redeployOnNearLessUsedNode();
	}
}

pattern Move_its_critical_Operation_to_the_less_critical_Component 
	mainRole : Node{
	match: mainRole.F_maxQl() and mainRole.F_HwUtil()		
	do{
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		//FIXING 4
		self.moveToLessCriticalComponent();
	}
}
*/