import "../evl/antipattern/PaF.eol";
//import "antipattern/EP.eol";

//libraries
import "../evl/library/element.eol";
import "../evl/library/package.eol";
import "../evl/library/component.eol";
import "../evl/library/operation.eol";
import "../evl/library/interaction.eol";
import "../evl/library/artifact.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/node.eol";
import "../evl/library/lifeline.eol";

//fixing
import "../evl/fixing/splitting.eol";


/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *																							 *
 *********************************************************************************************/

pattern Move_it_to_a_new_Component_deployed_to_a_new_Node
	mainRole : Operation {
	match : 
		mainRole.hasStereotype('GaStep') and mainRole.hasStereotype('GaScenario') and
		mainRole.PaF_F_probExec() and 
		mainRole.PaF_resDemand() and
		(not mainRole.PaF_F_throughtput().isEmpty() or not op.PaF_F_maxHwUtil().isEmpty() )  				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.moveToNewComponentDeployedOnNewNode(20.0);
	}
}

pattern Move_it_to_a_new_Component_deployed_to_the_less_used_neighbour_Node
	mainRole : Operation {
	match : 
		mainRole.hasStereotype('GaStep') and mainRole.hasStereotype('GaScenario') and
		mainRole.PaF_F_probExec() and 
		mainRole.PaF_resDemand() and
		(not mainRole.PaF_F_throughtput().isEmpty() or not op.PaF_F_maxHwUtil().isEmpty() ) 				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.moveToNewComponentDeployedOnNearLessUsedNode(20.0);
	}
}

pattern Redeploy_owner_Component_to_the_less_used_neighbour_Node
	mainRole : Operation {
	match : 
		mainRole.hasStereotype('GaStep') and mainRole.hasStereotype('GaScenario') and
		mainRole.PaF_F_probExec() and 
		mainRole.PaF_resDemand() and
		(not mainRole.PaF_F_throughtput().isEmpty() or not op.PaF_F_maxHwUtil().isEmpty() ) 				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.redeployOnNearLessUsedNode(20.0);
	}
}

pattern Move_it_to_the_less_critical_Component
	mainRole : Operation {
	match : 
		mainRole.hasStereotype('GaStep') and mainRole.hasStereotype('GaScenario') and
		mainRole.PaF_F_probExec() and 
		mainRole.PaF_resDemand() and
		(not mainRole.PaF_F_throughtput().isEmpty() or not op.PaF_F_maxHwUtil().isEmpty() ) 				
	do {
		UserInput.inform("The Operation named <"+mainRole.name+"> is a PaF! The solution will be applied!");
		mainRole.moveToLessCriticalComponent(20.0);
	}
}

/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *																							 *
 *********************************************************************************************/
 
pattern Move_its_critical_Operation_to_a_new_Component_deployed_to_a_new_Node 
	mainRole : Node{
	match: self.F_maxQl() and self.F_HwUtil()		
	do {
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		self.moveToNewComponentDeployedOnNewNode(); 
	}
}

pattern Move_its_critical_Operation_to_a_new_Component_deployed_to_the_less_used_neighbour_Node 
	mainRole : Node{
	match: self.F_maxQl() and self.F_HwUtil()		
	do{
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		//FIXING 2
		if(not self.moveToNewComponentDeployedOnNearLessUsedNode())
			"there was an error".println();
	}
}

pattern Redeploy_its_critical_Component_to_the_less_used_neighbour_Node 
	mainRole : Node{
	match: self.F_maxQl() and self.F_HwUtil()		
	do{
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		//FIXING 3
		self.redeployOnNearLessUsedNode();
	}
}

pattern Move_its_critical_Operation_to_the_less_critical_Component 
	mainRole : Node{
	match: self.F_maxQl() and self.F_HwUtil()		
	do{
		UserInput.inform("The Node named <"+mainRole.name+"> is a CPS! The solution will be applied!");
		//FIXING 4
		self.moveToLessCriticalComponent();
	}
}